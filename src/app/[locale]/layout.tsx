import { NextIntlClientProvider, hasLocale } from 'next-intl';
import { notFound } from 'next/navigation';
import { Poppins, Open_Sans } from 'next/font/google'
import { routing } from '@/i18n/routing';
import Navbar from '@/components/Navbar';
import type { Metadata } from 'next';
import '../globals.css';

// ① load the font
const poppins = Poppins({
  subsets: ['latin'],
  weight: ['400', '600', '700'],
  variable: '--font-poppins',
});

const openSans = Open_Sans({
  subsets: ['latin'],
  weight: ['400', '600', '700'],
  variable: '--font-opensans',
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

// 1. Don’t allow any locale not in routing.locales
export const dynamicParams = false;

// 2. Pre-render one page per supported locale
export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

export default async function LocaleLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: { locale: string };
}) {
  const { locale } = await params;

  // 3. Fallback to your custom 404 for unknown locales
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  return (
    <html lang={locale} className={`${poppins.variable} ${openSans.variable}`}>
      <head />
      <body>
        <NextIntlClientProvider locale={locale} /* + messages prop as needed */>
          <div>
            <Navbar />
            {children}
          </div>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
